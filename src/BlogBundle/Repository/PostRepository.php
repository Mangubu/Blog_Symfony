<?php

namespace BlogBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
  public function paginate($numberOfPost, $page, $critera = [])
  {

      $qb = $this->createQueryBuilder('p');

        $qb->orderBy("p.id", 'DESC')
        ->where('p.publicationDate <= :date')
        ->setParameter('date', new \DateTime())
        ->setMaxResults($numberOfPost)
        ->setFirstResult($numberOfPost*$page);

        if(isset($critera['categoryId']) && $critera['categoryId']){
          $qb
            ->andWhere('p.category = :categoryId')
            ->setParameter('categoryId', $critera['categoryId']);
        }

        if(isset($critera['title']) && $critera['title']){
          $qb->andWhere("LOWER(p.title) LIKE :titlePattern")
          ->setParameter('titlePattern', '%' . $critera['title'] . '%');
        }

        if(isset($critera['tags']) && $critera['tags'] && !empty($critera['tags'])){
          $qb->join('p.tags', 't')
          ->andWhere('t.name IN (:tagName)')
          ->setParameter(':tagName', $critera['tags']);
        }

    return $qb
            ->getQuery()
            ->getResult();
  }
  public function paginateByCategoryId($categoryId, $numberOfPost, $page)
  {

      return $this
              ->createQueryBuilder('p')
              ->where('p.category = :categoryId')
              ->setParameter('categoryId', $categoryId)
              ->orderBy("p.id", 'DESC')
              ->setMaxResults($numberOfPost)
              ->setFirstResult($numberOfPost*$page)
              ->getQuery()
              ->getResult();
  }
}
